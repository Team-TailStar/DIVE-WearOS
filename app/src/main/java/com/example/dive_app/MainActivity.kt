package com.example.dive_app

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.MotionEvent
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import com.example.dive_app.data.repository.WearDataRepository
import com.example.dive_app.domain.viewmodel.*
import com.example.dive_app.sensor.EmergencyTapDetector
import com.example.dive_app.sensor.HeartRateSensorManager
import com.example.dive_app.sensor.Spo2Manager
import com.example.dive_app.ui.viewmodel.FishingPointViewModel
import com.google.android.gms.wearable.MessageClient
import com.google.android.gms.wearable.MessageEvent
import com.google.android.gms.wearable.Wearable
import kotlinx.coroutines.launch
import org.json.JSONObject


/**
 * Wear OS Ïï±Ïùò Î©îÏù∏ Activity
 * - Ïã¨Î∞ïÏàò ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
 * - Android(Ìè∞)Í≥ºÏùò Data Layer ÌÜµÏã† (ÏöîÏ≤≠/ÏàòÏã†)
 * - ViewModel + Compose UI Ïó∞Í≤∞
 */
class MainActivity : ComponentActivity(), MessageClient.OnMessageReceivedListener {

    // ViewModels
    private val healthViewModel: HealthViewModel by viewModels()
    private val tideViewModel: TideViewModel by viewModels()
    private val weatherViewModel: WeatherViewModel by viewModels()
    private val fishViewModel: FishingPointViewModel by viewModels()
    private val locationViewModel: LocationViewModel by viewModels()
    private val airQualityViewModel: AirQualityViewModel by viewModels()

    private lateinit var heartRateSensorManager: HeartRateSensorManager
    private lateinit var spo2Manager: Spo2Manager
    private lateinit var tapDetector: EmergencyTapDetector
    private lateinit var repo: WearDataRepository

    private val CHANNEL_ID = "alert_channel"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Í∂åÌïú ÏöîÏ≤≠
        requestSensorPermission()
        requestAlertPermission()
        //requestCallPhonePermission()

        // ÏïåÎ¶º Ï±ÑÎÑê ÏÉùÏÑ±
        createNotificationChannel()

        // Ïã¨Î∞ïÏàò Îß§ÎãàÏ†Ä Ï¥àÍ∏∞Ìôî
        heartRateSensorManager = HeartRateSensorManager(this) { bpm ->
            Log.d("WatchMsg", "‚ù§Ô∏è Heart rate: $bpm BPM")
            healthViewModel.updateBpm(bpm)

            val responseJson = JSONObject().apply {
                put("heart_rate", bpm)
                put("timestamp", System.currentTimeMillis())
            }
            replyToPhone("/response_heart_rate", responseJson.toString())
        }

        // Í∏¥Í∏âÌÉ≠ Í∞êÏßÄÍ∏∞
        tapDetector = EmergencyTapDetector {
            healthViewModel.triggerTapEmergency()
        }

        spo2Manager = Spo2Manager(this)
        repo = WearDataRepository(
            weatherViewModel, tideViewModel, fishViewModel, locationViewModel, airQualityViewModel
        )

        setContent {
            MainApp(
                healthViewModel,
                fishViewModel,
                weatherViewModel,
                tideViewModel,
                locationViewModel,
                airQualityViewModel
            )
        }

        // SpO‚ÇÇ ÏàòÏßë
        lifecycleScope.launch {
            spo2Manager.currentSpo2.collect { spo2 ->
                if (spo2 > 0) {
                    healthViewModel.updateSpo2(spo2)

                    val responseJson = JSONObject().apply {
                        put("spo2", spo2)
                        put("timestamp", System.currentTimeMillis())
                    }
                    replyToPhone("/response_spo2", responseJson.toString())

                    Log.d("WatchMsg", "ü©∏ SpO‚ÇÇ ÏóÖÎç∞Ïù¥Ìä∏: $spo2%")
                }
            }
        }

        // ÌÖåÏä§Ìä∏ ÏïåÎ¶º (Ïï± Ïã§Ìñâ Ïãú Î∞îÎ°ú ÌëúÏãú)
        showWatchNotification("ÌÖåÏä§Ìä∏ ÏïåÎ¶º", "ÏõåÏπò ÏïåÎ¶ºÏù¥ Ï†ïÏÉÅ ÎèôÏûëÌï©ÎãàÎã§")
    }

    override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {
        if (ev?.action == MotionEvent.ACTION_DOWN) {
            tapDetector.onTapped()
        }
        return super.dispatchTouchEvent(ev)
    }

    override fun onMessageReceived(messageEvent: MessageEvent) {
        val path = messageEvent.path
        val data = String(messageEvent.data, Charsets.UTF_8)

        when (path) {
            "/typhoon_alert" -> {
                val msg = String(messageEvent.data)
                try {
                    val json = JSONObject(msg)
                    val typhoon = json.getString("typhoon")
                    val distance = json.getDouble("distance")
                    val body = "$typhoon Ï†ëÍ∑º: ÏïΩ ${"%.1f".format(distance)} km"

                    showWatchNotification("ÌÉúÌíç Í≤ΩÍ≥†", body)
                } catch (e: Exception) {
                    showWatchNotification("ÏïåÎ¶º Ïò§Î•ò", msg)
                }
            }
            "/weather_alert" -> {
                try {
                    val json = JSONObject(data)
                    val msg = json.getString("weather_alert")
                    showWatchNotification("Í∏∞ÏÉÅ Í≤ΩÍ≥†", msg)
                } catch (e: Exception) {
                    showWatchNotification("ÏïåÎ¶º Ïò§Î•ò", data)
                }
            }

            "/tide_alert" -> {
                try {
                    val json = JSONObject(data)
                    val msg = json.getString("tide_alert")
                    showWatchNotification("Î¨ºÎïå Í≤ΩÍ≥†", msg)
                } catch (e: Exception) {
                    showWatchNotification("ÏïåÎ¶º Ïò§Î•ò", data)
                }
            }
            "/alert_accident" -> {
                try {
                    val json = JSONObject(data)
                    val msg = json.optString("message", "ÏúÑÌóòÏßÄÏó≠ Í≤ΩÍ≥† Î∞úÏÉù")
                    val region = json.optString("region", "")
                    val place = json.optString("place_se", "")

                    // ÏõêÌïòÎäî ÌòïÌÉúÎ°ú Ìè¨Îß∑
                    val body = if (region.isNotBlank() && place.isNotBlank()) {
                        "[$region $place] $msg"
                    } else {
                        msg
                    }

                    showWatchNotification("ÏúÑÌóòÏßÄÏó≠ Í≤ΩÍ≥†", body)
                } catch (e: Exception) {
                    showWatchNotification("ÏïåÎ¶º Ïò§Î•ò", data)
                }
            }
            "/request_heart_rate" -> {
                Log.d("WatchMsg", "üì© Ìè∞ÏóêÏÑú Ïã¨Î∞ïÏàò ÏöîÏ≤≠ Î∞õÏùå")

                val latestBpm = healthViewModel.currentBpm.value

                val responseJson = JSONObject().apply {
                    put("heart_rate", latestBpm)
                    put("timestamp", System.currentTimeMillis())
                }
                replyToPhone("/response_heart_rate", responseJson.toString())
            }
            else -> repo.handleMessage(path, data)
        }
    }

    /** ÏïåÎ¶º Ï±ÑÎÑê ÏÉùÏÑ± */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Í≤ΩÍ≥† ÏïåÎ¶º",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Í∞ÅÏ¢Ö Í≤ΩÍ≥† ÏïåÎ¶º Ï±ÑÎÑê"
            }
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(channel)
        }
    }

    /** ÏïåÎ¶º ÌëúÏãú */
    private fun showWatchNotification(title: String, message: String) {
        val builder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_alert)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)

        with(NotificationManagerCompat.from(this)) {
            if (ActivityCompat.checkSelfPermission(
                    this@MainActivity,
                    android.Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                // Í∂åÌïúÏù¥ ÏóÜÏúºÎ©¥ Í∑∏ÎÉ• Î¶¨ÌÑ¥ (ÎòêÎäî ÏöîÏ≤≠ Î°úÏßÅ Ï∂îÍ∞Ä)
                ActivityCompat.requestPermissions(
                    this@MainActivity,
                    arrayOf(android.Manifest.permission.POST_NOTIFICATIONS),
                    1001
                )
                return
            }
            notify(System.currentTimeMillis().toInt(), builder.build())
        }
    }

    /** Í∂åÌïú ÏöîÏ≤≠Îì§ */
    private fun requestSensorPermission() {
        if (ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.BODY_SENSORS
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(android.Manifest.permission.BODY_SENSORS),
                100
            )
        }
    }

    private fun requestCallPhonePermission() {
        if (ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.CALL_PHONE
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(android.Manifest.permission.CALL_PHONE),
                100
            )
        }
    }

    private fun requestAlertPermission() {
        if (ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.POST_NOTIFICATIONS
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(android.Manifest.permission.POST_NOTIFICATIONS),
                1001
            )
        }
    }

    /** Ìè∞ÏúºÎ°ú ÏöîÏ≤≠ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞ */
    fun requestWeather() = replyToPhone("/request_weather", "request")
    fun requestTide() = replyToPhone("/request_tide", "request")
    fun requestPoint() = replyToPhone("/request_point", "request")
    fun requestAirQuality() = replyToPhone("/request_air_quality", "request")
    fun requestLocation() = replyToPhone("/request_location", "request")

    /** Î©îÏãúÏßÄ Ï†ÑÏÜ° Í≥µÌÜµ Ìï®Ïàò */
    private fun replyToPhone(path: String, message: String) {
        Wearable.getNodeClient(this).connectedNodes
            .addOnSuccessListener { nodes ->
                nodes.forEach { node ->
                    Wearable.getMessageClient(this)
                        .sendMessage(node.id, path, message.toByteArray())
                        .addOnSuccessListener {
                            Log.d("WatchMsg", "üì® Ìè∞ÏúºÎ°ú Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏÑ±Í≥µ ‚Üí $path")
                        }
                        .addOnFailureListener { e ->
                            Log.e("WatchMsg", "‚ö†Ô∏è Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®: ${e.message}")
                        }
                }
            }
    }

    override fun onResume() {
        super.onResume()
        heartRateSensorManager.start()
        spo2Manager.startListening()
        Wearable.getMessageClient(this).addListener(this)
    }

    override fun onPause() {
        super.onPause()
        heartRateSensorManager.stop()
        spo2Manager.stopListening()
        Wearable.getMessageClient(this).removeListener(this)
    }
}


